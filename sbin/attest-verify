#!/usr/bin/python3
"""
Eventlog verifier, which only checks golden PCR values against a database.
"""
import os
import sys
import yaml
import hashlib
import logging
import subprocess

# hard code the hashing algorithm used
alg = 'sha256'

# attestation directory path (XXX make configurable)
db_path = os.environ.get('SAFEBOOT_DB_DIR','build/attest')

# Check that all of the required PCRs are present and match the golden values.
# It is ok if the quote or event log have more, but none must be missing.
def pcr_validate(golden, quote):
	if alg not in quote:
		print("Quote does not have PCR algorithm '%s'" % (alg))
		return false
	if alg not in golden:
		print("PCR file does not have PCR algorithm '%s'" % (alg))
		return false

	quote = quote[alg]
	golden = golden[alg]
	valid = True

	if golden == None:
		golden = {}
	for pcr in golden:
		if type(golden[pcr]) == type(1):
			good_pcr = golden[pcr]
		else:
			good_pcr = int(golden[pcr], 16)
		if not pcr in quote:
			print("PCR%d missing" % (int(pcr)), file=sys.stderr)
			valid = False
		elif good_pcr != quote[pcr]:
			print("PCR%d mismatch %x != expected %x" % (pcr, quote[pcr], good_pcr), file=sys.stderr)
			valid = False

	return valid

def write_tofu_pcrs(fn, q, which_pcrs):
	v = { 'pcrs': { 'sha256': {}}}
	for pcr in which_pcrs:
		v['pcrs']['sha256'][pcr] = q[pcr]
	print("Writing TOFU PCRs to %s" % (fn), file=sys.stderr)
	with open(fn, 'w') as f:
		yaml.dump(v, f)

# The caller is expecting specific return codes to facilitate meaningful
# logging (and a reduction in noise)
# 99: general problem, log all the stderr, to hell with brevity.
# 100: no matching ekpubhash doesn't exist in the DB
# TODO: quote_valid should be deprecated. HCP always passes TRUE (why come
# through here with a known-invalid quote?), but it's left here in case other
# lingering dependencies on it need to be cleaned up.
def verify(quote, quote_valid):
	ekhash = quote['ekhash']

	# check for an enrolled directory
	ekdir = os.path.join(db_path, 'ekpubhash', ekhash[0:2], ekhash[0:6], ekhash[0:32])
	if not os.path.exists(ekdir):
		ekdir = os.path.join(db_path, ekhash[0:2], ekhash)
		if not os.path.exists(ekdir):
			logging.warning(f"{ekhash=}: can't find matching enrollment")
			return 100

	# default policy is to reject any invalid quotes
	if quote_valid != "True":
		logging.warning(f"{ekhash=}: rejecting invalid quote")
		return 99

	if os.path.exists(os.path.join(ekdir, 'phase2')):
		tofu_pcrs = [0, 1]
		if os.path.exists(os.path.join(db_path, 'tofu_pcrs')):
			with open(os.path.join(db_path, 'tofu_pcrs')) as tofu_pcrs_file:
				tofu_pcrs = yaml.safe_load(tofu_pcrs_file)
		if len(tofu_pcrs) > 0 and not os.path.exists(os.path.join(ekdir, "pcrs")):
			write_tofu_pcrs(os.path.join(ekdir, "pcrs"),
					quote['pcrs']['sha256'], tofu_pcrs)
		with open(os.path.join(ekdir, "pcrs")) as pcrs_file:
			valid_pcrs = yaml.safe_load(pcrs_file)
		if valid_pcrs is None:
			logging.warning(f"{ekhash=}: rejecting unknown machine")
			return 99

		if not pcr_validate(valid_pcrs['pcrs'], quote['pcrs']):
			logging.warning(f"{ekhash=}: rejecting bad PCRs")
			return 99

	# the eventlog meets the policy requirements
	# so output the secret for encoding by the attestation server
	logging.info(f"{ekhash=}: sending secrets")

	sub = subprocess.run(["tar", "cf", "-", "-C", ekdir, "."],
		stdout=sys.stdout,
		stderr=sys.stderr,
	)
	if sub.returncode != 0:
		logging.warning(f"{ekhash=}: asset-packing failed")

	return sub.returncode

if __name__ == '__main__':
	from sys import argv
	logging.basicConfig(level=logging.INFO)

	if len(argv) <= 2:
		print("Usage: attest-verify cmd...", file=sys.stderr)
		exit(1)

	if argv[1] == "predictpcr":
		# predictpcr ek.pub index digest ....
		# this is predicts the eventual PCR value based on the hashes
		# that are extended into the PCR. it does not take the final PCR value
		with open(argv[2],"rb") as ekpub:
			# compute the "name" of the ekpub
			ekhash = hashlib.sha256(ekpub.read()).hexdigest()
		pcrindex = int(argv[3])

		# extend operation is NewPCR = SHA256(PCR || SHA256(newdata))
		# this takes in the hash of the values, so the second SHA256 is not used
		pcr = bytearray(32)
		for newhash in argv[4:]:
			pcr = hashlib.sha256(pcr + bytes.fromhex(newhash)).digest()
		pcr = pcr.hex()

		with open("%s/%s/%s/pcrs" % (db_path, ekhash[0:2], ekhash), "w") as pcrs:
			print("pcrs:", file=pcrs)
			print("  sha256:", file=pcrs)
			print("    %d : %s" % (pcrindex, pcr), file=pcrs)

		print(ekhash + ": " + str(pcrindex) + "=" + pcr)

		exit(0)

	if argv[1] == "verify":
		quote_valid = argv[2]
		eventlog = yaml.safe_load(sys.stdin)
		exit(verify(eventlog, quote_valid))

	print("Unknown command: '%s'"  % (argv[1]), file=sys.stderr)
	exit(1)

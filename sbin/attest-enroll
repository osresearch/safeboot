#!/bin/bash
# Given an TPM endorsement key and desired host name,
# create the enrollment data for this system.
# Usage: attest-enroll hostname < ek.pub
#
# Outputs stored in a directory based on the hash of the EK pub:
# - Transport Key (TK): sealed to the EK (pub, dpriv, seed)
# - Disk Key (DK): random disk encryption key
# - Client Key (CK): a host certificate for this system
# - Other data

set -euo pipefail
shopt -s extglob

PROG=${0##*/}
BINDIR=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")
TOP=$(dirname "$BINDIR")

if [[ -s $TOP/lib/safeboot/functions.sh ]]; then
	# shellcheck disable=SC1090 source=functions.sh
	. "$TOP/lib/safeboot/functions.sh"
elif [[ -s $TOP/functions.sh ]]; then
	# shellcheck disable=SC1090 source=functions.sh
	. "$TOP/functions.sh"
else
	echo "Unable to find Safeboot function library" 1>&2
	exit 1
fi

# Make sure to export SAFEBOOT_ENROLL_CONF for external genprogs
#
# If one or more -C options given, use the first one for this (see getopts
# loop below).
cf=$(safeboot_file etc safeboot.conf)
if [[ -n $cf && -f $cf ]]; then
	export SAFEBOOT_ENROLL_CONF=/etc/safeboot/enroll.conf
	CONF=$SAFEBOOT_ENROLL_CONF
fi
configured=false

EKPUB=/dev/stdin

# Configuration variables
DBDIR="$TOP/build/attest"
POLICY=
ESCROW_POLICY=
ESCROW_PUBS_DIR=
TRANSPORT_METHOD=WK
DEFAULT_EK_POLICY=
declare -a GENPROGS
GENPROGS=(genhostname genmetadata genrootfskey)
declare -A POLICIES
POLICIES=()

# For the configure function (see below)
declare -A vars
vars[DBDIR]=scalar
vars[POLICY]=scalar
vars[ESCROW_POLICY]=scalar
vars[ESCROW_PUBS_DIR]=scalar
vars[TRANSPORT_METHOD]=scalar
vars[DEFAULT_EK_POLICY]=scalar
vars[CHECKOUT]=scalar
vars[COMMIT]=scalar
vars[GENPROGS]=array
vars[POLICIES]=assoc
vars[SIGNING_KEY_PRIV]=scalar	# This should be a blah.priv for a TPM entity,
				# in which case there should also be a
				# blah.pub, or it should be a PEM file with a
				# private key
vars[SIGNING_KEY_POLICY]=scalar
vars[SIGNING_KEY_PUB]=scalar	# This should be either just the public key
				# or a certificate for it and a chain.  MUST be
				# PEM.
vars[SIGNING_KEY_ANCHOR]=scalar # MUST be PEM.
vars[TPM_VENDORS]=scalar
vars[VALIDATE]=scalar

configs() {
	local var type

	for type in scalar array assoc; do
		printf '\t\tBash configuration variables (%s):\n' "$type"
		for var in "${!vars[@]}"; do
			[[ ${vars[$var]} = "$type" ]] && echo "$var"
		done | sort | fmt -w 50 | sed 's/^/\t\t\t/'
		echo
	done
}

die() { echo >&2 "Error: $PROG" "$@" ; exit 1 ; }
warn() { echo >&2 "$@" ; }

# This is used via declare -n:
# shellcheck disable=SC2034
known_policy_pcr11=7fdad037a921f7eec4f97c08722692028e96888f0b970dc7b3bb6a9c97e8f988

genhostname() {
	if [[ -s $outdir/hostname ]]; then
		if [[ $(cat "${outdir}/hostname") = "${hostname}" ]]; then
			echo "skip"
			return 0;
		fi

		info "Recording secondary hostname: $hostname"
		echo "$hostname" > "${1}/hostname-${hostname:0:80}"
		echo "public hostname-${hostname:0:80}"
		return 0
	fi

	info "Recording primary hostname: $hostname"
	echo "$hostname" > "${1}/hostname"
	echo "public hostname"
}

genmetadata()
{
	if [[ -s $outdir/meta-data ]]; then
		echo "skip"
		return 0
	fi
	echo '{"instance-id": "iid-local01"}' > "${1}/meta-data"
	cat > "${1}/user-data" <<EOF
#cloud-config
hostname: $hostname
chpasswd:
  expire: False
  list: |
    root:password
    ubuntu:password
EOF
	echo "public meta-data user-data"
}

genrootfskey() {
	if [[ -s ${outdir}/rootfs.key.enc ]]; then
		echo "skip"
		return 0
	fi

	info "Creating a secret filesystem key for enrolled system"
	openssl rand 64 > "${1}/rootfs.key" \
	|| die "$0: unable to create disk encryption key"
	echo "sensitive rootfs.key"
}

genmanifest() {
	(cd "${outdir}" && sha256sum !(manifest).sig) > "${1}/manifest"
	if [[ -s ${outdir}/manifest ]] \
	   && cmp "${outdir}/manifest" "${1}/manifest" >/dev/null; then
		echo "skip"
	else
		echo "public manifest"
	fi
}

gentest0() {
	if [[ -s ${outdir}/test0.enc ]]; then
		echo "skip"
		return 0
	fi
	dd if=/dev/urandom of="${1}/test0" bs=512 count=1 2>/dev/null
	sha256 < "${1}/test0" > "${1}/test0pub"
	echo "sensitive test0 test0pub"
}

gentest1() {
	local suffix=$RANDOM
	echo test4$suffix > "${1}/test4-$suffix"
	echo test4pub > "${1}/test4pub-$suffix"
	echo "public test4-$suffix test4pub-$suffix"
}

gentest2() {
	echo "skip"
}

configure() {
	local var varname val

	[[ -n ${1:-} && $1 = *=* ]] || die "Not a configuration assignment: $1"
	varname=${1%%=*}
	var=${varname%%[[]*}
	val=${1#*=}
	[[ -n ${vars[$var]:-} ]] || die "Not a configuration variable: $var"
	typeset -n v=$varname
	case "${vars[$var]}" in
	scalar)	v=$val;;
	assoc)	v=$val;;
	array)	if [[ $varname = *\[* ]]; then v="$val"; else v+=("$val"); fi;;
	*)	die "Not a configuration variable: $var";;
	esac
}

usage() {
	((${1:-1} == 0)) || exec 1>&2
	pager=cat
	if [[ -t 0 && -t 1 && -t 2 ]]; then
		if [[ -z ${PAGER:-} ]] && type less >/dev/null 2>&1; then
			pager=less
		elif [[ -z ${PAGER:-} ]] && type more >/dev/null 2>&1; then
			pager=more
		elif [[ -n ${PAGER:-} ]]; then
			pager=$PAGER
		fi
	fi
	$pager <<EOF
Usage: $PROG [OPTIONS] HOSTNAME [DIR] < EKPUB
       $PROG [OPTIONS] -I EKPUB HOSTNAME [DIR]

  Enrolls the {EKPUB} as {HOSTNAME} in the attestation database used by
  {tpm2-attest} and {attest-server}.  The enrolled device is provisioned
  with credentials and metadata by configured {genprog}s, with secrets
  encrypted to the {EKPUB}.

  If {EKPUB} is already enrolled as {HOSTNAME}, then any missing
  credentials and/or metadata will be added.  This makes enrollment
  idempotent.

  EKPUB must be one of

   - endorsement key certificate (EKcert) in PEM or DER form
   - endorsement key public key in {TPM2B_PUBLIC} form
   - endorsement key public key in PEM form

  If an EKcert is given, it will be validated.  Otherwise the user is
  expected to have validated that the {EKPUB} is for a legitimate dTPM.

  If {-a} is given, the {HOSTNAME} will be added as a secondary hostname
  for {EKPUB} if already enrolled.

  If {-r} is given, the existing enrollment for {EKPUB} is replaced.

  Note that though credentials are encrypted, the attestation database
  should be considered sensitive, as its ecrypted secrets should not be
  furnished to clients except super-encrypted as part of a trusted state
  attestation protocol.

  Options:

    -h			This message
    -v			Verbose
    -x			Trace

    -a			Add to existing enrollment of this EKpub
    -r			Replace the current enrollment of this EKpub
    -I EKPUB		EKpub file (default: $EKPUB)

  Configuration options:

    -C CONF		Config file (default: $CONF).
    -V VAR=VAL		Scalar configuration parameter assignment.
    -V VAR=VAL		Add value to array configuration parameter.
    -V VAR[k]=VAL	Set associative ("dict") configuration parameter.

$(configs)

		ESCROW_PUBS_DIR should be a directory containing files named:
		    NAME.pem	-> RSA public keys
		    NAME.pub	-> TPM EKpub
		    NAME.policy	-> policy to use when escrowing to NAME.pub

		GENPROGS should be an array of secret or metadata generators
		for enrolled systems (default: ${GENPROGS[*]}).

		Each {genprog} may have additional configuration variables that
		all may be set via configuration files or {-V SETTING}.

		POLICY is the default policy for secrets generated by
		{genprog}s.
		POLICIES key names should be {genprog} names minus any
		"gen" prefix.  Values should be policyDigest values,
		names of hard-coded policies, or names of executables
		(default: POLICIES[rootkey]=pcr11).

		TRANSPORT_METHOD should be WK or TK (default: WK).

  NOTE: Until https://github.com/tpm2-software/tpm2-tools/issues/2761 is
	closed, {$PROG} may require a TPM (simulated will suffice) for
	policyDigest computations of policies to be used for encrypting
	sensitive data.  Specify all policies as policyDigest values in
	hex to avoid this problem.

  \${CONF} must be a bash script that will be sourced.
  \${DBDIR}/attest-enroll.conf will also be sourced, if it exists.

  If \${DBDIR} is not configured, then both \${CHECKOUT} and \${COMMIT}
  must be configured.  \${CHECKOUT}, if given, will be run early and its
  output will be a directory in which {$PROG} will do its work.
  \${COMMIT}, if given, will be run when {$PROG} is done to save its
  work.  Both, \${CHECKOUT} and \${COMMIT}, are called with these
  arguments:
	\${ekhash} \${hostname} \${DBDIR}

  {genprog}s will be called in the order they are given, with the following
  arguments:

    TMP-OUTPUT-DIR ENROLL-DIR HOSTNAME

  and are expected to a) create one or more files in TMP-OUTPUT-DIR, b) output:

    sensitive FILENAME1 [FILENAME2 ..].

  or

    public FILENAME1 [FILENAME2 ..].

  or

    skip [REASON]

  E.g.,

    sensitive SOMEPRIVKEY

    sensitive SOMEPRIVKEY.PEM SOMEPUBKEY.PEM SOMECERT.PEM

    public SOME-META-DATA-HERE

    skip NOT NEEDED

  The FILENAMEs are of files in the TMP-OUTPUT-DIR.  Any sensitive FILENAME1
  file will be encrypted and escrowed; all other files will be copied to the
  enrollment area for the given EKpub.

  Exit status:

   - 0	Success
   - 1  Error
EOF
	exit "${1:-1}"
}

add=false
debug=false
outdir=
replace=false
VERBOSE=0
while getopts +:C:I:V:adhrvx opt; do
case "$opt" in
C)	# Read given configuration
	# shellcheck disable=SC1090
	. "$OPTARG"
	if ! $configured; then
		# Save the first given config so that genprogs can see it
		export SAFEBOOT_ENROLL_CONF="$OPTARG"
		configured=true
	fi
	CONF='';;
I)	EKPUB=$OPTARG;;
V)	if ! $configured && [[ -f $SAFEBOOT_ENROLL_CONF ]]; then
		# shellcheck disable=SC1090
		. "$SAFEBOOT_ENROLL_CONF"
		configured=true
	fi
	configure "$OPTARG";;
a)	add=true;;
d)	debug=true;;
h)	usage 0;;
r)	replace=true;;
v)	((VERBOSE++)) || true;;
x)	set -vx;;
*)	usage;;
esac
done
shift $((OPTIND - 1))
(($# == 1 || $# == 2)) || usage
hostname=$1
outdir=${2:-}
shift

# Read default configuration if none given
# shellcheck disable=SC1090
if [[ -n ${CONF:-} && -f ${CONF} ]]; then
	. "${CONF}"
	if ! $configured; then
		export SAFEBOOT_ENROLL_CONF="$CONF"
		configured=true
	fi
fi
[[ -z ${DBDIR:-} && ( -z ${CHECKOUT:-} || -z ${COMMIT:-} ) ]]	\
&& die "Missing DBDIR setting and either or both of CHECKOUT and COMMIT"
# shellcheck disable=SC1090
if [[ -n ${DBDIR:-} && -f ${DBDIR:-}/attest-enroll.conf ]]; then
	. "${DBDIR}/attest-enroll.conf"
	if ! $configured; then
		export SAFEBOOT_ENROLL_CONF="$CONF"
		configured=true
	fi
fi
[[ ${TRANSPORT_METHOD:-} = @(TK|WK) ]]	\
|| die "TRANSPORT_METHOD must be either 'TK' or 'EK'"
[[ -z $ESCROW_PUBS_DIR || -d $ESCROW_PUBS_DIR ]] \
|| die "ESCROW_PUBS_DIR -- must be a directory or not given"

# XXX This policy is for the WK method.
#
# FIXME We could make policies for WK/TK have the same digest by using
#       TPM2_PolicyOR:
#
#       tpm2 policy... -L ...
#       tpm2 policyor  -L ... sha256:$(tpm2 policycommandcode ...),$(tpm2 policycommandcode ...)
((${#POLICIES[@]} == 0))	\
&& POLICIES[rootfskey]="7fdad037a921f7eec4f97c08722692028e96888f0b970dc7b3bb6a9c97e8f988"

# Normalize policies
for policy_name in "${!POLICIES[@]}"; do
	p=${POLICIES[$policy_name]:-}
	[[ -n $p ]] || continue
	if ((${#p} == 64)) && [[ $p = +([0-9a-fA-F]) ]]; then
		continue;
	fi
	if [[ $p = [a-zA-Z]+([a-zA-Z0-9_-]) ]]; then
		declare -n var="known_policy_$p"
		if [[ -n ${var:-} ]]; then
			POLICIES[$policy_name]=$var
			unset -n var
			continue
		fi
		unset -n var
	fi
	if [[ $p = /* && -x $p ]]; then
		POLICIES[$policy_name]=$("$p" "$TRANSPORT_METHOD")
	elif [[ $p = /* && -f $p ]]; then
		sz=$(stat -c %s "$p")
		if ((sz == 32)); then
			p=$(xxd -p < "$p")
		else
			# shellcheck disable=SC2162,SC2034
			read p2 junk < "$p"
			((${#p2} != 64)) \
			|| die "Policy $p is not a policy digest"
			[[ $p2 = +([0-9a-fA-F]) ]] \
			|| die "Policy $p is not a policy digest"
			POLICIES[$policy_name]=$p2
		fi
	fi
done

tmp=
success=false
swtpm_pid=
cleanup() {
	if ((VERBOSE > 1)); then
		(
		[[ -n $outdir && -d $outdir ]] && sha256sum "${outdir}/"*
		sha256sum "$tmp"/*
		) | sort
	fi

	(
		[[ -n $swtpm_pid ]]	\
		&& kill -0 "$swtpm_pid"	\
		&& kill "$swtpm_pid"
	) 2>/dev/null			\
	|| true
	unset TPM2TOOLS_TCTI

	if $debug; then
		echo "LEAVING TEMP DIR ALONE: $tmp" 1>&2
		exit 0;
	fi
	[[ -n $tmp ]] && rm -rf "$tmp";
	if ! $success; then
		warn "Failed to enroll $hostname"
	fi
}
tmp="$(mktemp -d)"
trap cleanup EXIT

# We might need a TPM for what should be software-only things...
start_swtpm() {
	local -i tries port
	((port= 10240 + ( ($$ % (32768 - 10240) ) ) ))
	mkdir "${tmp}/swtpm"

	for ((tries=0; tries < 3; tries++, port+=2)); do
		swtpm socket --tpm2							\
			     --daemon							\
			     --tpmstate dir="${tmp}/swtpm"				\
			     --pid file="${tmp}/.pid"					\
			     --server type="tcp,bindaddr=127.0.0.1,port=$port"		\
			     --ctrl type="tcp,bindaddr=127.0.0.1,port=$((port+1))"	\
			     --flags startup-clear					\
		|| continue
		sleep 1
		swtpm_pid=$(cat "${tmp}/.pid")
		break
	done

	[[ -n $swtpm_pid ]]	\
	|| die "Could not start a software TPM"
	export TPM2TOOLS_TCTI="swtpm:host=127.0.0.1,port=$port"
}

info() {
	((VERBOSE == 0)) || echo info: "$@" 1>&2
}

# escrow SRC-FILE-NAME [DST-FILE-NAME]
escrow() {
	local src="$1"
	local dst="$2"
	local aname k policy

	[[ -z $ESCROW_PUBS_DIR ]] && return 0
	for k in "${ESCROW_PUBS_DIR}"/*.pem "${ESCROW_PUBS_DIR}"/*.pub; do
		aname=${k##*/}
		[[ $aname = [*].??? ]] && continue
		if [[ $aname = *.pub ]]; then
			if [[ -f ${aname%.pub}.policy ]]; then
				policy=${ESCROW_PUBS_DIR}/${aname%.pub}.policy
			else
				policy="${ESCROW_POLICY:-}"
			fi
			info "Escrowing secret ${src} to TPM $k"
			tpm2-send -f -P "$policy" \
				"$k" "${tmp}/${src}" \
				"${outdir}/escrow-${aname}-${dst}" \
				|| die "$0: unable to escrow secret with EK"
		else
			info "Escrowing secret $src as $dst to bare RSA pubkey $k"
			openssl rsautl \
				-encrypt \
				-pubin \
				-inkey "$k" \
				-in "${tmp}/${src}" \
				-out "${outdir}/escrow-${aname}-${dst}" \
				|| die "$0: unable to escrow secret with bare public key"
		fi
	done
}

# Encrypt $1 and place the resulting ciphertext in ${2}.symkeyenc and ${2}.enc.
#
# Creates a symmetric key in ${1}-symkey that the caller may escrow and must
# remove.
#
# ${2}.enc is encrypted in the ${1}-symkey using AES-128 keyed with the
# randomly generated key (${1}-symkey), and MAC'ed with HMAC-SHA256.  See
# functions.sh:aead_encrypt() for details.
#
# ${2}.symkeyenc is encrypted using the specified $TRANSPORT_METHOD.
encrypt_util() {
	local genprog="$1"
	shift

	local symkey="${1}-symkey"
	local policy="${POLICIES[${genprog#gen}]:-${POLICY:-}}"

	_rand 32 > "$symkey"
	aead_encrypt "$1" "$symkey" "${2}.enc"

	info "Encrypting secret $1 to enrollee with policy $policy"
	tpm2-send					\
		-f					\
		-P "$policy"				\
		-M "$TRANSPORT_METHOD"			\
		"$EKPUB" "$symkey" "${2}.symkeyenc"
	echo "$policy" > "${2}.policy"
}

# Encrypt GENPROG_NAME FILE0
encrypt() {
	local genprog=$1
	shift

	[[ -f $outdir/${1}.symkeyenc && -f $outdir/${1}.enc ]] \
	&& return 0

	# Encrypt and escrow
	encrypt_util "$genprog" "${tmp}/$1" "${outdir}/${1}"
	escrow "${1}-symkey" "${1}.symkeyenc"
	shift
}

# Sign an enrolled host asset
sign() {
	[[ -z ${SIGNING_KEY_PRIV:-} ]]		\
	&& die "SIGNING_KEY_PRIV not configured!"
	[[ -z ${SIGNING_KEY_PUB:-} ]]		\
	&& die "SIGNING_KEY_PUB not configured!"

	# Sign using a TPM key if we can load it as a TPM key
	if [[ $SIGNING_KEY_PRIV = *.priv ]]				\
	   && tpm2 flushcontext --transient-object	2>/dev/null	\
	   && tpm2 createprimary --hierarchy o				\
				 --key-context "${tmp}/primary.ctx"	\
	   && tpm2 load --private "$SIGNING_KEY_PRIV"			\
			--public "${SIGNING_KEY_PRIV%.priv}.pub"	\
			--parent-context "${tmp}/primary.ctx"		\
			--key-context "${tmp}/signing-key.ctx"; then
		tpm2 flushcontext --transient-object
		tpm2 flushcontext --loaded-session
		if [[ -n ${SIGNING_KEY_POLICY:-} ]]; then
			# Execute the policy
			"${SIGNING_KEY_POLICY}" -e "${tmp}/s.ctx"
		fi
		tpm2 sign --key-context "${tmp}/signing-key.ctx"	\
			  ${SIGNING_KEY_POLICY:+--auth}			\
			  ${SIGNING_KEY_POLICY:+session:"${tmp}"/s.ctx}	\
			  --scheme rsassa				\
			  --hash-algorithm sha256			\
			  --format plain				\
			  --signature "${1}.sig"			\
			  < "$1"
		return 0
	fi

	# Sign using OpenSSL
	openssl pkeyutl -sign					\
			-keyform PEM				\
			-inkey "$SIGNING_KEY_PRIV"		\
			-in <(sha256 < "$1" | hex2bin)		\
			-out "${1}.sig"
}

start_swtpm

cat "$EKPUB" > "$tmp/ekpub" \
|| die "$0: unable to read EKpub from stdin"
exec </dev/null

# Normalize EKpub into TPM2B_PUBLIC form
# TODO: Support EKcert
case "$(file -b --mime-type "$tmp/ekpub")" in
text/plain)
	# Should be a PEM file then
	EKCERT=
	if grep -q CERTIFICATE "$tmp/ekpub"; then
		# EKcert
		cp "$tmp/ekpub" "$tmp/ekcert.pem"
		EKCERT="$tmp/ekcert.pem"
		openssl x509 -pubkey		\
			     -noout		\
			     -outform PEM	\
			     -in "$tmp/ekpub"	\
			     > "$tmp/ek.pub"
		if [[ -d $TPM_VENDORS ]]; then
			CAarg=CApath
		elif [[ -f $TPM_VENDORS ]]; then
			CAarg=CAfile
		else
			die "TPM_VENDORS is set to a non-existent file/directory"
		fi
		openssl verify -$CAarg "$TPM_VENDORS"		\
			       -partial_chain			\
			       "$tmp/ekpub"			\
		|| die "EKcert is not trusted"
		pem2tpm2bpublic "$tmp/ekpub"	\
				"$tmp/ek.pub"	\
				"${DEFAULT_EK_POLICY:-}"
	elif grep -q PUBLIC "$tmp/ekpub"; then
		# Plain public key
		pem2tpm2bpublic "$tmp/ekpub"	\
				"$tmp/ek.pub"	\
				"${DEFAULT_EK_POLICY:-}"
	else
		die "Cannot understand given EKpub/EKcert"
	fi;;

application/octet-stream)
	EKCERT=
	cp "$tmp/ekpub" "$tmp/ek.pub";;

*)	die "Given EKpub is not in a supported format: $(file -b --mime-type "$tmp/ekpub")";;
esac
EKPUB="$tmp/ek.pub"

#
# Verify that the EK meets our specifications
#
# TODO: Support EKcert.
#
tpm2 print \
	-t TPM2B_PUBLIC \
	"$tmp/ek.pub" > "$tmp/ek.txt" \
|| die "$0: unable to parse EK"

grep -q "value: fixedtpm.*sensitivedataorigin.*restricted" "$tmp/ek.txt" \
|| die "$0: EK has wrong parameters"

grep -q "authorization policy: 837197..." "$tmp/ek.txt" \
|| warn "$0: EK has wrong authorization policy, attestation will likely fail"

#
# Figure out where to put this enrolled key
#
ekhash="$(sha256sum "$tmp/ek.pub" | cut -f1 -d' ' )"
ekprefix=${ekhash:0:2}

if [[ -z "$hostname" ]] ; then
	hostname="$(echo "$ekhash" | cut -c1-8)"
	warn "$PROG: using default hostname $hostname"
fi

# Invoke checkout hook
[[ -z ${CHECKOUT:-} ]] \
|| outdir=$("$CHECKOUT" "$ekhash" "$hostname" "$DBDIR")
[[ -z $outdir ]] \
&& outdir="$DBDIR/$ekprefix/$ekhash"

# Create the output directory and install files into it
#
# If we end up doing nothing at all then we'll fail.  We rely on that in
# tests/test-enroll.sh.  We use the {did_something} variable to keep track of
# this.
mkdir -p "${outdir%/*}" || die "unable to mkdir ${outdir%/*}"
if [[ -d $outdir ]] && $replace; then
	[[ -d "${outdir}-" ]] && rm -rf "${outdir}-"
	info "Replacing enrolled state for $ekhash"
	mv "$outdir" "${outdir}-" || die "could not rename previous enrollment"
	did_something=true
elif [[ -d $outdir && -f ${outdir}/hostname &&
        $(cat "${outdir}/hostname") != "$hostname" ]]; then

	$add || die "already enrolled: $ekhash"

	info "Adding secondary hostname to enrollment for $ekhash"
	did_something=true
elif [[ -d $outdir && -f ${outdir}/hostname ]]; then
	info "Possibly adding missing items to enrolled state for $ekhash"
	did_something=false
else
	info "Creating enrollment state for $ekhash"
	did_something=true
fi
mkdir -p "$outdir" || die "unable to create output directory $outdir"

cp "$EKPUB" "$outdir/ek.pub" \
|| die "unable to copy EK public key to output directory $outdir"

if [[ -n $EKCERT ]]; then
	cp "$EKCERT" "$outdir/ek.pub" \
	|| die "unable to copy EK public key to output directory $outdir"
fi

info "Generating secrets and metadata"
for genprog in "${GENPROGS[@]}" genmanifest; do
	info "Running GENPROG $genprog"

	# We want to split the output of genprog on spaces:
	# shellcheck disable=SC2046
	set -- $("$genprog" "$tmp" "$outdir" "$hostname")

	if (($# > 0)) && [[ $1 = skip ]]; then
		shift
		info "GENPROG $genprog skipped${1:+": "}$*"
		continue
	fi
	if (($# < 2)) ||
	   [[ $1 != @(sensitive|public) ||
	      ! -f $tmp/$2 ]]; then
		warn "GENPROG $genprog output is unexpected: $*; skipping"
		continue
	fi
	kind=$1
	shift
	if [[ $kind = sensitive ]]; then
		# Encrypt file, escrow, and place into output dir.
		info "Encrypting secret file from $genprog: $1"
		encrypt "$genprog" "$1"
		info "Signing ciphertext $1"
		sign "${outdir}/${1}.enc"
		did_something=true
		shift
	fi

	# Copy any remaining files
	while (($# > 0)); do
		if [[ -f ${outdir}/$1 ]]; then
			info "Replacing public file $1"
			mv -f "${outdir}/$1" "${outdir}/${1}-"
		else
			info "Installing public file $1"
		fi
		cp -f "${tmp}/$1" "${outdir}/${1}"
		info "Signing metadata file $1"
		sign "${outdir}/$1"
		did_something=true
		shift
	done
done

# Re-sign all assets if the signing key has changed
if [[ -f ${outdir}/${SIGNING_KEY_PUB##*/} ]] &&
   ! cmp "$SIGNING_KEY_PUB" "${outdir}/signer.pem" >/dev/null; then
	for sig in "{outdir}"/*.sig; do
		sign "${sig%.sig}"
	done
	did_something=true
fi

# Install the signing key public part (preferably it should be a certificate
# and chain) and anchor, if we have one
if [[ ! -f ${outdir}/${SIGNING_KEY_PUB##*/} ]] ||
   ! cmp "$SIGNING_KEY_PUB" "${outdir}/signer.pem" >/dev/null; then
	cp -f "$SIGNING_KEY_PUB" "${outdir}/signer.pem"
	did_something=true
fi
if [[ -n ${SIGNING_KEY_ANCHOR:-} ]]	\
   && ! cmp "$SIGNING_KEY_ANCHOR" "${outdir}/anchor.pem" >/dev/null 2>&1; then
	cp -f "$SIGNING_KEY_ANCHOR" "${outdir}/anchor.pem"
	did_something=true
fi

if [[ -z ${COMMIT:-} ]]; then
	# Update hostname "index"
	mkdir -p "$DBDIR/hostname2ekpub"
	echo "$ekhash" > "$DBDIR/hostname2ekpub/$hostname"
fi

if $did_something; then
	if [[ -n ${COMMIT:-} ]]; then
		"$COMMIT" "$ekhash" "$outdir" "$hostname" "$DBDIR"
	fi
	info "$hostname: enrolled $ekhash"
	success=true
else
	die 2 "Already enrolled and nothing to add to enrollment"
fi

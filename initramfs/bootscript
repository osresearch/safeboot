#!/bin/bash
# Take over from /init once the system has been configured
# and the state attested.  The secret file from the remote attestation server
# will be passed on the command line

set -euo pipefail

echo "TPM2TOOLS_TCTI=$TPM2TOOLS_TCTI"
. /safeboot/functions.sh

[[ -n ${BOOTSCRIPT_DEBUG:-} ]] && set -vx

POLICY_PCR=11
die() {
	echo >&2 "$@"
	[[ -z $BOOTSCRIPT_TEST ]] \
	&& echo "FAILED" | tpm2 pcrevent $POLICY_PCR
	exit 1
}
warn() { echo >&2 "$@" ; }

if [[ -z ${ROOTFS_DEV:-} ]]; then
	ROOTFS_DEV="/dev/sda"
fi

VOLUME="cryptroot"
MAPPER="/dev/mapper/$VOLUME"
KERNEL="/root/boot/vmlinuz"
INITRD="/root/boot/initrd.img"
KEXEC_EXTRA=""

# Unpack the attestation server's response
TMPDIR=$(mktemp -d)
tar -xvf - -C "$TMPDIR" \
|| die "attestation response is not a valid tar file?"

[[ -f /etc/safeboot/anchor.pem || -f /etc/safeboot/enroll-signer.pem ]] \
&& /safeboot/sbin/tpm2-attest verify-unsealed "$TMPDIR"

STARTUP="$TMPDIR/startup.sh"
KEY="$TMPDIR/rootfs.key"

if [[ -x $STARTUP && -f ${STARTUP}.sig ]]; then
	# measure the startup script before doing anything else
	warn "$STARTUP: measuring"
	tpm2 pcrevent 14 "$STARTUP"
	warn "$STARTUP: executing"
	# shellcheck disable=SC1090
	. "$STARTUP" || die "startup failed"
fi

if [[ -f $TMPDIR/rootfs.key.symkeyenc ]]; then
	/safeboot/sbin/tpm2-recv "$KEY.symkeyenc" "$KEY.symkey"	\
		tpm2 policypcr --pcr-list="sha256:$POLICY_PCR"
	aead_decrypt "$KEY.enc" "$KEY.symkey" "$KEY"
fi

# If we're testing, stop here.
[[ -n ${BOOTSCRIPT_TEST:-} ]] && exit 0

kexec_img() {
	# add the decryption key to initrd by creating a temporary copy
	# the source initrd must be padded to 512 bytes or else the kernel
	# won't look for additional cpio files appended after it.
	TMP_INITRD="$TMPDIR/initrd.img"

	warn "$INITRD: adding secret key"

	dd \
		if="$INITRD" \
		of="$TMP_INITRD" \
		bs=512 \
		conv=sync \
	|| die "$INITRD: unable to copy to $TMPDIR"

	# todo: these are causing swtpm to timeout?
	#warn "$KERNEL: measuring"
	#tpm2 pcrevent 14 < "$KERNEL"
	#warn "$TMP_INITRD: measuring"
	#tpm2 pcrevent 14 < "$TMP_INITRD"

	if [ -r "$KEY" ]; then
		# Append a cpio file with a single rootfs.key file that contains the
		# secret to decrypt the root filesystem.
		mkdir -p "$TMPDIR/initrd"
		cp "$KEY" "$TMPDIR/initrd/rootfs.key" \
		|| die "$KEY: unable to copy secret key"

		( cd "$TMPDIR/initrd" ; echo rootfs.key | cpio -H newc -o ) >> "$TMP_INITRD" \
		|| die "$TMP_INITRD: unable to add $KEY to initrd"

		KEXEC_EXTRA="$KEXEC_EXTRA \
cryptopts=target=rootfs,source=$ROOTFS_DEV,key=/rootfs.key,luks,discard \
"

	else
		warn "response did not include encrypted rootfs.key"
	fi

	# Load the official kernel and the modified initrd
	# passing in the command line arguments to decrypt the
	# encrypted disk, and then mount the real root filesystem
	# by label.
	KEXEC_CMDLINE="\
console=ttyS0 \
root=LABEL=cloudimg-rootfs \
ro \
$KEXEC_EXTRA \
"
	warn "$KERNEL: $KEXEC_CMDLINE"

	kexec \
		--load "$KERNEL" \
		--initrd "$TMP_INITRD" \
		--command-line "$KEXEC_CMDLINE" \
	|| die "$KERNEL: unable to load with kexec"

	kexec -e

	# if we end up here, we're in trouble...
	die "$KERNEL: kexec failed"
}

mount_img() {
	mkdir -p /run/cryptsetup

	warn "$ROOTFS_DEV: unlocking with secret key"
	cryptsetup luksOpen \
		--key-file "$KEY" \
		"$ROOTFS_DEV" \
		"$VOLUME"
}

install_img() {
	if [ -z "$ROOTFS_URL" ]; then
		die "No disk image, no image URL to fetch. Nothing to do!"
	fi

	if [ -e "$MAPPER" ]; then
		cryptsetup luksClose "$VOLUME"
	fi

	#blockdev --setrw "$ROOTFS_DEV"

	warn "$ROOTFS_DEV: formatting with secret key"
	cryptsetup luksFormat \
		--pbkdf pbkdf2 \
		--batch-mode \
		--label="$VOLUME" \
		"$ROOTFS_DEV" \
		"$KEY" \
	|| die "$ROOTFS_DEV: luksFormat failed"

	mount_img \
	|| die "$ROOTFS_DEV: luksOpen failed"

	warn "$MAPPER: fetching disk image"

	if [ -r "$TMPDIR/img.hash" ]; then
		curl "$ROOTFS_URL" | tee "$MAPPER" | sha256sum - | tee "$TMPDIR/url.hash" \
		|| die "$ROOTFS_DEV: unable to fetch $URL"

		if ! cmp "$TMPDIR/img.hash" "$TMPDIR/url.hash" ; then
			die "$URL: hash failed!"
		fi

		warn "$URL: verified $URL_HASH"
	else
		curl "$ROOTFS_URL" > "$MAPPER"
		warn "$ROOTFS_URL: skipping validation"
	fi

	#blockdev --rereadpt "$MAPPER"

	echo "$MAPPER: File system installed"

	mount "$MAPPER" /root \
	|| die "$MAPPER: unable to mount?"

	# stash the server configuration in the encrypted /boot
	# if it was provided in the response
	if [ -r "$TMPDIR/user-data" ]; then
		warn "cloud-init: creating user-data"
		KEXEC_EXTRA="$KEXEC_EXTRA ds=nocloud;s=file:///boot/cloud-init/"
		mkdir -p /root/boot/cloud-init
		cp "$TMPDIR/user-data" /root/boot/cloud-init \
		|| die "user-data: unable to install"

		if [ -r "$TMPDIR/meta-data" ]; then
			cp "$TMPDIR/meta-data" /root/boot/cloud-init \
			|| die "meta-data: unable to install"
		fi
	fi

	# remove our write permissions
	mount -o ro,remount /root
}


# ensure that we don't accidentally touch the root device
# this breaks fsck, which is a problem
#blockdev --setro /dev/sda

# attempt to decrypt the disk; if this fails, reinstall an image
if ! mount_img || ! mount -o ro "$MAPPER" /root ; then
	warn "-------------------------------"
	warn "Unable to unlock and mount disk"
	warn "-------------------------------"

	read -r -n 1 -t 10 -p "Press any key to stop reinstall..." response
	if [ -n "$response" ]; then
		exit 0
	fi

	warn "No init in root filesystem, reinstalling"
	install_img
else
	echo "$MAPPER: unlock and mount successful"
fi

if [ ! -e "$KERNEL" ]; then
	die "$KERNEL: No kernel present in image?"
fi

read -r -n 1 -t 3 -p "Press any key to stop autoboot..." response
if [ -n "$response" ]; then
	exit 0
fi

kexec_img

die "kexec failed and we ended up here?"
